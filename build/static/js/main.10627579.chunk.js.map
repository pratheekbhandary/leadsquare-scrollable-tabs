{"version":3,"sources":["components/TabItem/index.tsx","components/TabRow/index.tsx","components/Modal/index.tsx","util/index.ts","components/Tabs/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TabItem","title","isSelected","onSelection","onClose","disableClose","className","onClick","fontSize","style","display","TabRow","children","scrollRef","useRef","useState","showLeftChevron","setShowLeftChevron","showRightChevron","setShowRightChevron","onScroll","useCallback","firstEleCoords","current","firstElementChild","getBoundingClientRect","lastEleCoords","lastElementChild","windowWidth","document","documentElement","clientWidth","isFirstEleVisible","x","isLastEleVisible","width","onLeftArrowClick","scrollIntoView","behavior","onRightArrowClick","IconButton","ArrowBackIos","ref","ArrowForwardIos","Modal","generateUUIDv4","replace","c","r","Math","random","toString","DragColumn","ReactDragListView","Tabs","tabs","maxTabCount","id","selectedTab","setSeletedTab","showModal","setShowModal","tabsInDragOrder","setTabsInDragOrder","inputRef","tabSelection","onDragEnd","fromIndex","toIndex","data","item","splice","event","stopPropagation","length","filteredTabs","filter","idLoop","onAddNewTabConfirmation","newTab","value","onKeyDown","key","nodeSelector","handleSelector","map","tab","padding","disabled","type","autoFocus","TABS","App","tabsWithID","useMemo","seletedTab","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.10627579.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nimport \"./TabItem.css\";\n\nconst TabItem: FC<{\n  title: string;\n  isSelected: boolean;\n  onSelection: (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;\n  onClose: (event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void;\n  disableClose: boolean;\n}> = ({ title, isSelected, onSelection, onClose, disableClose }) => {\n  return (\n    <li\n      className={`item${isSelected ? \" selected\" : \"\"}`}\n      onClick={onSelection}\n    >\n      {!disableClose && (\n        <CloseIcon\n          className=\"close\"\n          fontSize=\"small\"\n          style={{ display: \"none\" }}\n          onClick={onClose}\n        />\n      )}\n      {title}\n    </li>\n  );\n};\n\nexport default TabItem;\n","import { IconButton } from \"@material-ui/core\";\nimport { ArrowBackIos, ArrowForwardIos } from \"@material-ui/icons\";\nimport React, { FC, useCallback, useRef, useState } from \"react\";\nimport \"./TabRow.css\";\n\nconst TabRow: FC<{ children: React.ReactNode }> = ({ children }) => {\n  const scrollRef = useRef<HTMLUListElement | null>(null);\n  const [showLeftChevron, setShowLeftChevron] = useState(false);\n  const [showRightChevron, setShowRightChevron] = useState(false);\n\n  const onScroll = useCallback(() => {\n    const firstEleCoords = scrollRef.current?.firstElementChild?.getBoundingClientRect();\n    const lastEleCoords = scrollRef.current?.lastElementChild?.getBoundingClientRect();\n    let windowWidth = document.documentElement.clientWidth;\n    if (firstEleCoords && lastEleCoords && windowWidth) {\n      const isFirstEleVisible = firstEleCoords.x > 0;\n      const isLastEleVisible =\n        lastEleCoords.x + lastEleCoords.width < windowWidth;\n      if (isFirstEleVisible) {\n        setShowLeftChevron(false);\n      } else {\n        setShowLeftChevron(true);\n      }\n      if (isLastEleVisible) {\n        setShowRightChevron(false);\n      } else {\n        setShowRightChevron(true);\n      }\n    }\n  }, []);\n\n  const onLeftArrowClick = useCallback(() => {\n    scrollRef.current?.firstElementChild?.scrollIntoView({\n      behavior: \"smooth\",\n    });\n  }, []);\n  const onRightArrowClick = useCallback(() => {\n    scrollRef.current?.lastElementChild?.scrollIntoView({ behavior: \"smooth\" });\n  }, []);\n\n  return (\n    <div className=\"row-container\">\n      {showLeftChevron && (\n        <IconButton className=\"left-chevron\" onClick={onLeftArrowClick}>\n          <ArrowBackIos />\n        </IconButton>\n      )}\n      <ul className=\"row\" ref={scrollRef} onScroll={onScroll}>\n        {children}\n      </ul>\n      {showRightChevron && (\n        <IconButton className=\"right-chevron\" onClick={onRightArrowClick}>\n          <ArrowForwardIos />\n        </IconButton>\n      )}\n    </div>\n  );\n};\n\nexport default TabRow;\n","import React, { FC } from \"react\";\nimport \"./Modal.css\";\n\nconst Modal: FC<{ children: React.ReactNode }> = ({ children }) => {\n  return (\n    <div className=\"modal-container\">\n      <div className=\"modal\">{children}</div>\n    </div>\n  );\n};\n\nexport default Modal;\n","export function generateUUIDv4(): string {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    // eslint-disable-next-line no-mixed-operators\n    var r = (Math.random() * 16) | 0,\n      v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n","import React, { FC, useState, useCallback, useRef } from \"react\";\nimport TabItem from \"../TabItem\";\nimport TabRow from \"../TabRow\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Done from \"@material-ui/icons/Done\";\nimport Close from \"@material-ui/icons/Close\";\nimport AddTabIcon from \"@material-ui/icons/Add\";\nimport \"./Tabs.css\";\n//@ts-ignore\nimport ReactDragListView from \"react-drag-listview\";\nimport { TabDetailsType } from \"../../types\";\nimport Modal from \"../Modal\";\nimport { InputType } from \"zlib\";\nimport { generateUUIDv4 } from \"../../util\";\nconst { DragColumn } = ReactDragListView;\ninterface ITabsProp {\n  tabs: TabDetailsType[];\n  children: (selectedTab: string) => React.ReactNode;\n  maxTabCount: number;\n}\n\nconst Tabs: FC<ITabsProp> = ({ tabs, children, maxTabCount }) => {\n  const [selectedTab, setSeletedTab] = useState<string>(tabs[0]?.id || \"\");\n  const [showModal, setShowModal] = useState<boolean>(false);\n  const [tabsInDragOrder, setTabsInDragOrder] = useState<TabDetailsType[]>(\n    tabs\n  );\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const tabSelection = useCallback(\n    (id: string) => () => {\n      setSeletedTab(id);\n    },\n    []\n  );\n\n  const onDragEnd = useCallback(\n    (fromIndex, toIndex) => {\n      const data = [...tabsInDragOrder];\n      const item = data.splice(fromIndex, 1)[0];\n      data.splice(toIndex, 0, item);\n      setTabsInDragOrder(data);\n      setSeletedTab(item.id);\n    },\n    [tabsInDragOrder]\n  );\n\n  const onClose = useCallback(\n    (id: string) => (event: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\n      event.stopPropagation();\n      if (tabsInDragOrder.length <= 1) {\n        return;\n      }\n      const filteredTabs = tabsInDragOrder.filter(\n        ({ id: idLoop }) => id != idLoop\n      );\n      setTabsInDragOrder(filteredTabs);\n      setSeletedTab(filteredTabs[0].id);\n    },\n    [tabsInDragOrder]\n  );\n\n  const onAddNewTabConfirmation = useCallback(() => {\n    if (!inputRef.current) {\n      return;\n    }\n    const newTab = { id: generateUUIDv4(), title: inputRef.current.value };\n    setTabsInDragOrder([...tabsInDragOrder, newTab]);\n    setShowModal(false);\n    setSeletedTab(newTab.id);\n  }, [tabsInDragOrder]);\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === \"Enter\") {\n        onAddNewTabConfirmation();\n      }\n    },\n    [onAddNewTabConfirmation]\n  );\n\n  return (\n    <div className=\"tab-container\">\n      <DragColumn nodeSelector=\"li\" handleSelector=\"li\" onDragEnd={onDragEnd}>\n        <TabRow>\n          {tabsInDragOrder.map((tab) => (\n            <TabItem\n              key={`tab-item${tab.id}`}\n              isSelected={selectedTab === tab.id}\n              title={tab.title}\n              onSelection={tabSelection(tab.id)}\n              onClose={onClose(tab.id)}\n              disableClose={tabsInDragOrder.length === 1}\n            />\n          ))}\n          <IconButton\n            className=\"new-tab\"\n            style={{ padding: \"8px\" }}\n            onClick={() => setShowModal(true)}\n            disabled={maxTabCount <= tabsInDragOrder.length}\n          >\n            <AddTabIcon fontSize=\"small\" />\n          </IconButton>\n        </TabRow>\n      </DragColumn>\n      <div className=\"tab-content\">{children(selectedTab)}</div>\n\n      {showModal && (\n        <Modal>\n          <div className=\"new-tab-modal\">\n            Enter tab name:\n            <input type=\"text\" ref={inputRef} autoFocus onKeyDown={onKeyDown} />\n            <IconButton onClick={onAddNewTabConfirmation}>\n              <Done />\n            </IconButton>\n            <IconButton onClick={() => setShowModal(false)}>\n              <Close />\n            </IconButton>\n          </div>\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default Tabs;\n","import React, { useMemo } from \"react\";\nimport Tabs from \"./components/Tabs\";\nimport { TabDetailsType } from \"./types\";\nimport { generateUUIDv4 } from \"./util\";\nimport \"./App.css\";\n\nconst TABS = [\"one\", \"two\", \"three\", \"four\", \"five\"];\nfunction App() {\n  const tabsWithID = useMemo<TabDetailsType[]>(\n    () => TABS.map((tab) => ({ id: generateUUIDv4(), title: tab })),\n    []\n  );\n  return (\n    <div className=\"App\">\n      <Tabs tabs={tabsWithID} maxTabCount={10}>\n        {(seletedTab: string) => (\n          <div className=\"tab-display-content\">\n            <img\n              src={`https://source.unsplash.com/random/${seletedTab}`}\n              alt=\"image not available\"\n            />\n            <span>Selected tab {seletedTab} </span>\n          </div>\n        )}\n      </Tabs>\n      <div className=\"disclaimer\">\n        *images are randomly displayed from unsplash.com\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}